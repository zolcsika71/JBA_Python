type: edu
custom_name: stage4
files:
- name: tictactoe.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/enum.py
  visible: false
  text: |
    from enum import Enum
    from hstest import WrongAnswer


    class GameState(Enum):
        X_WIN = 'X_WIN'
        O_WIN = 'O_WIN'
        DRAW = 'DRAW'
        NOT_FINISHED = 'NOT_FINISHED'


    class CellState(Enum):
        X = 'X'
        O = 'O'
        EMPTY = ' '

        @classmethod
        def get(cls, char: str):

            char_to_cell_state = {
                'X': cls.X,
                'O': cls.O,
                ' ': cls.EMPTY,
                '_': cls.EMPTY
            }

            if char not in char_to_cell_state:
                raise WrongAnswer('Bad symbol ' + char + ' in the game grid')
            return char_to_cell_state[char]

        @classmethod
        def get_opponent(cls, player):
            if player == CellState.X:
                return CellState.O
            if player == CellState.O:
                return CellState.X
            raise Exception('Wrong method argument!')
  learner_created: false
- name: test/grid.py
  visible: false
  text: |
    from hstest import WrongAnswer
    from test.minimax import Position
    from test.enum import CellState, GameState
    from copy import copy


    class Grid:
        def __init__(self):
            self.__grid = [[CellState.EMPTY for _ in range(3)] for _ in range(3)]

        def get_grid(self):
            return self.__grid

        @classmethod
        def from_line(cls, line):
            if len(line) != 9:
                raise WrongAnswer("Wrong input length. Expected 9.\nFound " + str(len(line)))

            grid = Grid()

            for i, char in enumerate(line):
                grid.__grid[(int(i / 3))][i % 3] = CellState.get(char)

            return grid

        @classmethod
        def from_output(cls, string_field: str, field_number: int = 1):
            grid = Grid()

            field_lines = list(map(str.strip, string_field.splitlines()))
            field_lines = list(filter(lambda field_line:
                                      str(field_line).startswith('|') and str(field_line).endswith('|'),
                                      field_lines))

            if len(field_lines) < 3 * field_number:
                raise WrongAnswer("Expected not less than " + str(field_number) + " grids in the output!\n" +
                                  "Make sure you print the game grids in the correct format!")

            field_lines = field_lines[field_number * 3 - 3:field_number * 3]

            for i, line in enumerate(field_lines):
                if len(line) != 9:
                    raise WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line)
                for j in range(3):
                    grid.__grid[i][j] = CellState.get(line[j * 2 + 2])

            return grid

        @classmethod
        def all_grids_from_output(cls, string_field: str):

            grid_list = list()

            field_lines = list(map(str.strip, string_field.splitlines()))
            field_lines = list(filter(lambda field_line:
                                      str(field_line).startswith('|') and str(field_line).endswith('|'),
                                      field_lines))

            if len(field_lines) % 3 != 0:
                raise WrongAnswer(
                    "Wrong grid output format! Each grid should contain 3 lines that starts and ends with '|' symbol!")

            for i in range(len(field_lines) // 3):
                grid_lines = field_lines[i * 3:i * 3 + 3]

                grid = Grid()

                for j, line in enumerate(grid_lines):
                    if len(line) != 9:
                        raise WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line)
                    for k in range(3):
                        grid.__grid[j][k] = CellState.get(line[k * 2 + 2])

                grid_list.append(grid)

            return grid_list

        @classmethod
        def get_move(cls, from_grid, to_grid):
            for i in range(3):
                for j in range(3):
                    if from_grid.__grid[i][j] != to_grid.__grid[i][j]:
                        return Position(i, j)
            raise WrongAnswer("After making a move the grid was the same!")

        def is_win(self, player) -> bool:
            for i in range(3):
                if self.__grid[i][0] == self.__grid[i][1] and self.__grid[i][1] == self.__grid[i][2] and self.__grid[i][
                    2] == player:
                    return True

            for i in range(3):
                if self.__grid[0][i] == self.__grid[1][i] and self.__grid[1][i] == self.__grid[2][i] and self.__grid[2][
                    i] == player:
                    return True

            return (self.__grid[0][0] == self.__grid[1][1] and self.__grid[1][1] == self.__grid[2][2] and self.__grid[2][
                2] == player) or (self.__grid[2][0] == self.__grid[1][1] and self.__grid[1][1] == self.__grid[0][2] and
                                  self.__grid[0][2] == player)

        def has_empty_cells(self):
            for cells in self.__grid:
                for cell in cells:
                    if cell == CellState.EMPTY:
                        return True

        def get_num_of_empty_cells(self):
            result = 0
            for cells in self.__grid:
                for cell in cells:
                    if cell == CellState.EMPTY:
                        result += 1
            return result

        def get_game_state(self):
            if self.is_win(CellState.X):
                return GameState.X_WIN
            if self.is_win(CellState.O):
                return GameState.O_WIN
            if self.has_empty_cells():
                return GameState.NOT_FINISHED
            return GameState.DRAW

        def set_cell(self, x, y, cell_state):
            self.__grid[x][y] = cell_state

        def is_correct_next_grid(self, grid):
            return self.get_num_of_empty_cells() - grid.get_num_of_empty_cells() == 1

        def is_valid_grid(self):
            num_of_o = 0
            num_of_x = 0
            for cells in self.__grid:
                for cell in cells:
                    if cell == CellState.O:
                        num_of_o += 1
                    elif cell == CellState.X:
                        num_of_x += 1
            return abs(num_of_x - num_of_o) <= 1

        @classmethod
        def check_grid_sequence(cls, grids):

            if len(grids) <= 1:
                return

            for i in range(1, len(grids) - 1):
                prev_grid = grids[i - 1]
                grid = grids[i]

                if not grid.is_valid_grid():
                    raise WrongAnswer(
                        "Impossible grid was printed! The difference between Os and Xs in the grid is greater than 1:\n" + str(
                            grid))

                if not prev_grid.is_correct_next_grid(grid):
                    raise WrongAnswer("After making a move on grid\n" + str(prev_grid) + "\n it can't become\n" + str(grid))

                last_grid = grids[-1]

                if last_grid.get_game_state() == GameState.NOT_FINISHED:
                    raise WrongAnswer("Last grid is not terminal!\n" + str(last_grid))

        def __str__(self):
            result = '---------\n'
            for cell in self.__grid:
                result += '| {} {} {} |\n'.format(cell[0].value, cell[1].value, cell[2].value)
            result += '---------'
            return result

        def __eq__(self, other):
            if type(self) != type(other):
                return False

            for i in range(9):
                if self.__grid[int(i / 3)][i % 3] != other.__grid[int(i / 3)][i % 3]:
                    return False
            return True
  learner_created: false
- name: test/minimax.py
  visible: false
  text: |
    from test.enum import GameState, CellState


    class Position:

        def __init__(self, x: int, y: int):
            self.x = x
            self.y = y

        def __str__(self):
            return str(self.x) + " " + str(self.y)

        def __eq__(self, other):
            return other.x == self.x and other.y == self.y


    class Minimax:

        @classmethod
        def minimax(cls, grid, player, is_maximize, start_player, depth):

            game_state = grid.get_game_state()

            if game_state == GameState.X_WIN:
                return 10 - depth if start_player == CellState.X else depth - 10
            elif game_state == GameState.O_WIN:
                return 10 - depth if start_player == CellState.O else depth - 10
            elif game_state == GameState.DRAW:
                return 0

            best_score = -999 if is_maximize else 999

            for i in range(3):
                for j in range(3):
                    if grid.get_grid()[i][j] == CellState.EMPTY:
                        grid.set_cell(i, j, player)
                        score = cls.minimax(grid, CellState.get_opponent(player), not is_maximize, start_player, depth + 1)
                        grid.set_cell(i, j, CellState.EMPTY)
                        best_score = max(best_score, score) if is_maximize else min(best_score, score)

            return best_score

        @classmethod
        def get_move(cls, grid, player):
            best_score = -999
            best_position = None

            for i in range(3):
                for j in range(3):
                    if grid.get_grid()[i][j] == CellState.EMPTY:
                        grid.set_cell(i, j, player)
                        score = cls.minimax(grid, CellState.get_opponent(player), False, player, 1)
                        grid.set_cell(i, j, CellState.EMPTY)
                        if score > best_score:
                            best_score = score
                            best_position = Position(i, j)

            return best_position

        @classmethod
        def get_available_positions(cls, grid, player):

            positions = list()

            for i in range(3):
                for j in range(3):
                    if grid.get_grid()[i][j] == CellState.EMPTY:
                        grid.set_cell(i, j, player)
                        score = cls.minimax(grid, CellState.get_opponent(player), False, player, 1)
                        if score >= 0:
                            positions.append(Position(i, j))
                        grid.set_cell(i, j, CellState.EMPTY)

            return positions
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from copy import copy

    from hstest import StageTest, dynamic_test, TestedProgram, CheckResult

    from test.enum import GameState, CellState
    from test.grid import Grid
    from test.minimax import Minimax


    class Test:
        def __init__(self, inp, result, state, additional_contains=None):
            self.inp = inp
            self.result = result
            self.state = state
            self.additional_contains = additional_contains


    class TicTacToeTests(StageTest):
        easy_ai_moves = [0 for _ in range(9)]

        @dynamic_test(order=1)
        def test_bad_parameters(self):
            program = TestedProgram()
            program.start()

            output = program.execute("start")

            if "bad parameters" not in output.lower():
                return CheckResult.wrong("After entering start command with wrong parameters you should print "
                                         "'Bad parameters!' and ask to enter a command again!")

            output = program.execute("start easy")

            if "bad parameters" not in output.lower():
                return CheckResult.wrong("After entering start command with wrong parameters you should print "
                                         "'Bad parameters!' and ask to enter a command again!")

            program.execute("exit")

            if not program.is_finished():
                return CheckResult.wrong("After entering 'exit' command you should stop the program!")

            return CheckResult.correct()

        @dynamic_test(order=2)
        def test_grid_output(self):
            program = TestedProgram()
            program.start()

            output = program.execute("start user easy")

            printed_grid = Grid.from_output(output)
            empty_grid = Grid.from_line("_________")

            if printed_grid != empty_grid:
                return CheckResult.wrong(f"After starting the program you should print an empty grid!\n"
                                         f"Correct empty grid:\n{empty_grid}")

            if "enter the coordinates:" not in output.lower():
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!")

            output = program.execute("2 2")

            grid_after_move = Grid.from_output(output)
            correct_grid_after_move = Grid.from_line("____X____")

            if grid_after_move != correct_grid_after_move:
                return CheckResult.wrong(f"After making the move wrong grid was printed.\n"
                                         f"Your grid:\n{grid_after_move}\n"
                                         f"Correct grid:\n{correct_grid_after_move}")

            if "making move level \"easy\"" not in output.lower():
                return CheckResult.wrong("After entering a cell coordinates you should print:\n"
                                         "Making move level \"easy\"")

            grid_after_ai_move = Grid.from_output(output, 2)

            if grid_after_ai_move == grid_after_move:
                return CheckResult.wrong("After AI move grid wasn't changed!")

            game_grid = grid_after_ai_move

            while True:
                game_state = game_grid.get_game_state()
                if game_grid.get_game_state() != GameState.NOT_FINISHED:
                    if game_state == GameState.X_WIN and "X wins" not in output:
                        return CheckResult.wrong("You should print 'X wins' if X win the game!")
                    if game_state == GameState.O_WIN and "O wins" not in output:
                        return CheckResult.wrong("You should print 'O wins' if O win the game!")
                    if game_state == GameState.DRAW and "Draw" not in output:
                        return CheckResult.wrong("You should print 'Draw' if the game ends with draw!")
                    break

                next_move = Minimax.get_move(game_grid, CellState.X)
                temp_grid = copy(game_grid)

                temp_grid.set_cell(next_move.x, next_move.y, CellState.X)

                output = program.execute(f"{next_move.x + 1} {next_move.y + 1}")

                game_grid = Grid.from_output(output)

                if game_grid != temp_grid:
                    return CheckResult.wrong(f"After making move ({next_move}) the grid is wrong!\n"
                                             f"Your grid:\n{game_grid}\n"
                                             f"Correct grid:\n{temp_grid}")

                if game_grid.get_game_state() != GameState.NOT_FINISHED:
                    continue

                game_grid = Grid.from_output(output, 2)

            return CheckResult.correct()

        @dynamic_test(repeat=100, order=3)
        def check_easy_ai(self):

            program = TestedProgram()
            program.start()

            program.execute("start user easy")

            output = program.execute("2 2")

            grid_after_ai_move = Grid.from_output(output, 2)

            cells = grid_after_ai_move.get_grid()

            for i in range(9):
                if i == 4:
                    continue

                if cells[int(i / 3)][i % 3] == CellState.O:
                    self.easy_ai_moves[i] += 1

            return CheckResult.correct()

        @dynamic_test(order=4)
        def check_random(self):

            average_score = 0

            for i in range(len(self.easy_ai_moves)):
                average_score += (i + 1) * self.easy_ai_moves[i]

            average_score /= 8

            expected_value = (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8

            if abs(average_score - expected_value) > 20:
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!")

            return CheckResult.correct()

        is_easy_not_moving_like_medium = False

        @dynamic_test(repeat=30, order=-5)
        def check_easy_not_moving_like_medium(self):

            if self.is_easy_not_moving_like_medium:
                return CheckResult.correct()

            program = TestedProgram()
            program.start()

            program.execute("start user easy")

            output = program.execute("2 2")

            game_grid = Grid.from_output(output, 2)

            cells = game_grid.get_grid()

            if cells[0][0] == CellState.EMPTY and cells[2][2] == CellState.EMPTY:
                output = program.execute("1 1")
                game_grid = Grid.from_output(output, 2)
                if game_grid.get_grid()[2][2] == CellState.EMPTY:
                    self.is_easy_not_moving_like_medium = True
            else:
                output = program.execute("1 3")
                game_grid = Grid.from_output(output, 2)
                if game_grid.get_grid()[2][0] == CellState.EMPTY:
                    self.is_easy_not_moving_like_medium = True

            program.stop()

            return CheckResult.correct()

        @dynamic_test(order=6)
        def check_easy_not_moving_like_medium_after(self):
            if not self.is_easy_not_moving_like_medium:
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!")
            return CheckResult.correct()

        @dynamic_test(order=7)
        def check_easy_vs_easy(self):

            program = TestedProgram()
            program.start()

            output = program.execute("start easy easy")

            grids = Grid.all_grids_from_output(output)

            Grid.check_grid_sequence(grids)

            return CheckResult.correct()

        @dynamic_test(repeat=10, order=8)
        def check_medium_ai(self):

            program = TestedProgram()
            program.start()
            program.execute("start user medium")

            output = program.execute("2 2")

            game_grid = Grid.from_output(output, 2)

            cells = game_grid.get_grid()

            if cells[0][0] == CellState.EMPTY and cells[2][2] == CellState.EMPTY:
                output = program.execute("1 1")
                game_grid = Grid.from_output(output, 2)
                if game_grid.get_grid()[2][2] == CellState.EMPTY:
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!")
            else:
                output = program.execute("1 3")
                game_grid = Grid.from_output(output, 2)
                if game_grid.get_grid()[2][0] == CellState.EMPTY:
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!")

            program.stop()

            return CheckResult.correct()

        @dynamic_test(order=9)
        def check_medium_vs_medium(self):

            program = TestedProgram()
            program.start()

            output = program.execute("start medium medium")

            grids = Grid.all_grids_from_output(output)

            Grid.check_grid_sequence(grids)

            return CheckResult.correct()

        is_medium_not_moving_like_hard = False

        @dynamic_test(repeat=30, order=10)
        def check_medium_not_moving_like_hard(self):

            if self.is_medium_not_moving_like_hard:
                return CheckResult.correct()

            program = TestedProgram()
            program.start()

            program.execute("start user medium")

            output = program.execute("2 2")

            user_move_grid = Grid.from_output(output, 1)
            medium_move_grid = Grid.from_output(output, 2)

            medium_move = Grid.get_move(user_move_grid, medium_move_grid)

            minimax_correct_positions = Minimax.get_available_positions(user_move_grid, CellState.O)

            if medium_move not in minimax_correct_positions:
                self.is_medium_not_moving_like_hard = True

            return CheckResult.correct()

        @dynamic_test(order=11)
        def check_medium_not_moving_like_hard_after(self):
            if not self.is_medium_not_moving_like_hard:
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!")
            return CheckResult.correct()


    if __name__ == '__main__':
        TicTacToeTests().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/82/stages/455/implement#comment
status: Unchecked
record: -1
